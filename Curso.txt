*** LARAVEL 5.1 COM IONIC E CORDOVA

CONFIGURANDO A APLICAÇÃO
    - Criar o projeto: composer create-project --prefer-dist laravel/laravel <nome_projeto> 5.1.*
    - Conferir APP_KEY em .env
    - Modificar o namespace da aplicação: php artisan app:name <novo_namespace>
    - Criar a pasta App\Models; mover o model User e ajustar o namespace no início do arquivo User.php
    - Ajustar o namespace de User também em config\auth.php
    - Configurar o banco de dados no arquivo .env
    - Rodar a migration para criar as tabelas de usuários

CRIANDO O MODEL CATEGORY
    - Criar a mgration: php artisan make:migration create_categories_table --create=categories
        IMPORTANTE: Se o nome do model é Category automaticamente o Laravel reconhece a tabela
        como categories
    - Acrescentar as colunas necessárias na migration criada executar: php artisan migrate
    - Criar o model: php artisan make:model Models/Category
    - Definir a propriedade $fillable no model criado

CRIANDO A SEEDER
    - Editar o arquivo database/factories/ModelFactory.php; ajustar o namespace de User
    - Definir um novo factory para o model Category
    - Criar a seeder: php artisan make:seed UserTableSeeder
    - Editar o método run() da seed:
        factory(CodeDelivery\Models\User::class, 10)->create();
    - O arquivo database/seeds/DatabaseSeeder.php é responsável por executar as seeds
    - Incluir a chamada à seed no método run() de DatabaseSeeder.php
    - Executar a seed: php artisan db:seed
        . Repetir o processo para Category

PRODUCTS
    - Criar a migration: php artisan make:migration create_products_table --create=products
    - Definir as colunas de prdutos, inclusive os relacionamentos:
        $table->integer('category_id')->unsigned();
        $table->foreign('categirt_id')->references('id')->on('categories');
        $table->string('name');
        $table->text('description');
        $table->decimal('price');
    - Executar a migração
    - Criar o model Product e definir $fillable
    - Criar uma factory para Procuct em ModelFactory.php (não colocar a coluan category_id)
    - Criar uma função no model Category:
        public function products() {
            return $this->hasMany(CodeDelivery\Models\Product::class);
        }
    - Em Products:
        public function category() {
            return $this->belongsTo(CodeDelivery\Models\Category::class);
        }
    - Em CategoryTableSeeder.php:
        factory(Category::class, 10)->create()->each(function($c){
            for ($i = 0; $i < 5; $i++) {
                $c->products()->save(factory(CodeDelivery\Models\Product::class)->make());
            }
        });
    - Executar as migrations e as seeders: php artisan migrate:refresh --seed
    - Realizar testes com o tinker
    
CLIENTS
    - Criar a tabela (migration) de clientes: php artisan make:migration create_clients_table --create=clients
    - Criar as colunas na migreation e relacionar com a tabela de Users
        $table->increments('id');
        $table->integer('user_id')->unsigned();
        $table->foreign('user_id')->references('id')->on('users');
        $table->string('phone');
        $table->text('address');
        $table->string('city');
        $table->string('state');
        $table->string('zipcode');
    - Rodar a migration: php artisan migrate
    - Criar o model Client e definir a variável $fillable
    - Criar o relacionamento de um para um entre Client e User
        // em Client
        public function user() {
            return $this->hasOne(User::class);
        }

        // em User
        public function client() {
            return $this->hasOne(Client::class);
        }
    - Criar a factory para Client em ModelFactory.php
    - Definir a criação dos clientes na seeder de usuários:
        factory(CodeDelivery\Models\User::class, 10)->create()->each(function($u) {
            $u->client()->save(factoty(\CodeDelivery\Models\Client::class)->make());
        });
    - Executar a migração: php artisan migrate:refresh --seed

PEDIDOS
    - php artisan make:migration create_orders_table --create=orders
        Criar as colunas e relacionar com clients
        Criar um relacionamento para entregador
            $table->integer('client_id')->unsigned();
            $table->foreign('client_id')->references('id')->on('clients');
            $table->integer('user_deliveryman_id')->unsigned()->nullable();
            $table->foreign('user_deliveryman_id')->references('id')->on('users');
            $table->decimal('total');
            $table->smallInteger('status')->default(0);
    - php artisan make:migration create_orders_items_table --create=orders_items
        $table->integer('product_id')->unsigned();
        $table->foreign('product_id')->references('id')->on('products');
        $table->integer('order_id')->unsigned();
        $table->foreign('order_id')->references('id')->on('orders');
        $table->decimal('price');
        $table->smallInteger('qtd');
    - Rodar a migração
    - Criar os models
    - No model Order, definir $fillable e fazer os relacionamentos:
            public function items() {
                return $this->hasMany(OrderItem::class);
            }
            public function deliveryman() {
                return $this->belongsTo(User::class);
            }
    - No model OrderItem, definir $fillable php e fazer os relacionamentos:
            public function product() {
                return $this->belongsTo(Product::class);
            }

            public function order() {
                return $this->belongsTo(Order::class);
            }
    - Na migration de orders, trocar o apontamento de client_id para a tabela users
    - Na migration de users adicionar uma coluna role:
        $table->string('role')->default('client');

REPOSITORIES
    - coposer require pretturs/l5-repository
    - Editar o arquivo config/app.php
        . incluir nos prividers: Prettus\Repository\Providers\RepositoryServiceProvider::class
    - Publicar os arquivos do pacote: php artisan vendor:publish
    - Editar o arquivo config/repositoriy.php
        . Ajustar 'rootNamespace' para 'CodeDelivery\\'
        . Ajustar 'models' para 'Models'
    - Criar o repository: php artisan make:repository Category -f
        . O -f força a criação do model. Precisamos desta opção pois já criamos nossos models
        . Este comando cria também o model Category, então, antes devemos copiar o conteúdo do model que já criamos
          para colar no novo model vazio.
        . O model User exige mais atenção ao copiar o conteúdo (interfaces, traits....).
    - Criar um service provider para configurar a chamada ao repository (registrar)
        . php artisan make:provider RepositoryServiceProvider
        . Editar o método register() do arquivo RepositoryServiceProvider.php 
            $this->app->bind(
                'CodeDelivery\Repositories\CategoryRepository',
                'CodeDelivery\Repositories\CategoryRepositoryEloquent'
            );
        . O trecho acima diz ao Laravel para instanciar a classe CategoryRepositoryEloquent
          sempre que for solicitada a interface CategoryRepository.
    - Registrar o novo provider no arquivo config/app.php
        . CodeDelivery\Providers\RepositoryServiceProvider::class
    - Para testar, crie uma rota de teste com o código
        $repository = app()->make(CodeDelivery\Repositories\CategoryRepository::class);
        reutrn $repository->all();
    - RESUMO: criou os repositories para os models, criou o service provider para os repositories
      e registrou o service provider no arquivo app.php

SISTEMA ADMINISTRATIVO
    - Editar o arquivo composer.json e acrescentar a linha: "minimum-stability":"dev",
    - Instalar bestmomo/scafold para servir de base para a interface: composer require bestmomo/scafold
    - Editar o arquivo app.php e registrar o provider: Bestmomo\Scafold\ScafoldServiceProvider::class
    - Publicar o service provider: php artisan vendor:publish

TRABALHANDO COM CONTROLLERS
    - Para criar o controller: php artisan make:controller CategoriesController --plain
    - Criar um método index() no controller criado.
    - Criar uma rota para testar o método: Route:get('admin/categories', 'CategoriesController@index');
    - Criar estrutura para os arquivos das views
        . Criar o diretório resources\views\admin\categories
        . Criar um arquivo: index.blade.php
    - Chamar a view no controller: view('admin.categories.index')
    - Atualizar a view utilizando o template 'app': @extends('app'), @section('content'), @endsection
        @foreach (??? as ???) ... @endforeach, @if () ... @endif, {{ ... }}, {!! ... !!}
    - Listar as categorias:
        . Fazer uma DI no método index(): public function index(CategoryRepository $repository)
        . Recuperar as categorias: $categories = $repository->all();
        . Fazer o retorno da view: return view('admin.categories.index', compact('categories');
        . Trocar o método all() para o método paginate() para permitir a paginação.
        . Incluir na view index.blade o código da paginação sem utilizar os escapes: {!! ... !!}
    - Para criar uma nova categoria: criar a view create.blade.php
        . Criar um novo método (action) no model que retornará a nova view: create().
        . Criar uma nova rota e nomeá-la: Route::get('/admin/categories/create', ['as' => 'admin.categories.create', 'uses' => 'CategoriesController@create']);
        . Atualizar o link de nova categoria na view index: <a href="{{ route('admin.categories.create') }}" class="btn btn-default">Nova categoria</a>
ILLUMINATEHTML
    - Instalar o illuminate: composer require illuminate/html
    - Registrar o repository: Illuminate\Html\HtmlServiceProvider::class
    - Registrar a facade (são como apelidos): 
        'Html' => Illuminate\Html\HtmlFacade::class
        'Form' => Illuminate\Html\FormFacade::class
CRIANDO FORMULÁRIO
    - Criar uma nova rota:
        Route::post('admin/categories/store', ['as' => 'admin.categories.store', 'uses' => 'CategoriesController@store']);
    - Criar a ação para a rota: public function store()
        . Criar um construtor em CategoryController e injetar o CategoryRepository
        . Criar o método store:
            public function store(Request $request) {
                $data = $request->all();
                $this->repository->create($data);
                return redirect()->route('admin.categories.index');
            }
        . Criar a rota index:
            Route::get('admin/categories/index', ['as' => 'admin.categories.index', 'uses' => 'CategoriesController@index']);
    - Editar o arquivo create.blade.php
        {!! Form:open(['rote' => 'admin.categories.store']) !!}
        <div class="form-group">
            {!! Form::label('name', 'Name:') !!}
            {!! Form::text('name', null, ['class' => 'form-control']) !!}
        </div>
        <div class="form-group">
            {!! Form::submit('Criar categoria', ['class' => 'btn btn-primary']) !!}
        </div>
        {!! Form:close() !!}
CUSTOM REQUEST
    - Criar uma nova request para validar os dados
        php artisan make:request AdminCategoryRequest
    - Editar a request cirada AdminCategoryRequest.php. No método authorize() torcar o retorno para TRUE.
      Este método serve para implementar alguma lógica de permissão de acesso.
    - Editar o método rules() e criar as validações necessárias. Ex.:
        return [
            'name' => 'required|min:3'
        ];
    - Editar a view categories/create.blade.php:
        @if ($errors->any())
        <ul class="alert">
        @foreach ($errors->all() as $error)
            <li>{{$error}}</li>
        @endforeach     
        </ul>
        @endif
    - O método store() deverá agora receber um AdminCategoryRequest no lugar da Request

UPDATING
    - Criar uma nova rota: Route::get('admin/categories/edit/{id}', ['as' => 'admin.categories.edit', 'uses' => 'CategoriesController@edit']);
    - Criar o método edit em CategoriesController
        public function edit($id) {
            $category = $this->repository->find($id);
            return view('admin.categories.edit', compact('category'));
        }
    - Duplicar a view create e renomear para edit e ajustar o form:
        {!! Form::model($category, ['route' => ['admin.categories.update', $category->id]]) !!}

    - Criar a rota e o método update:
        Route::post('admin/categories/update/{id}', ['as' => 'admin.categories.update', 'uses' => 'CategoriesController@update']);
       
        public function update(AdminCategoryRequest $request, $id) {
            $data = $request->all();
            $this->repository->update($data, $id);
            return redirect()->route('admin.categories.index');
        }
    - Criar o botão para acesso ao formulário de edição:
        . Editar a view index:
            <a href="{{route('admin.categories.edit', ['id' => $category->id])}} class="btn btn-default btn-small">Editar</a>
    - Editar a template view app.blade.php e criar a opção de acesso às categorias:
        <a href="{{route('admin.categories.index')}}">Categorias</a>

REFATORANDO FORM
    - Criar uma inlcude com os campos do form: categories\_form.blade.php.
    - Criar uma include para verificar erros: errors\_check.blade.php.
    - Ajustar create e edit.
 
CRUD PRODUTOS
    - Criar um ProductsController (duplicar a category).
    - Criar as rotas (duplicar).
    - Criar as views (duplicar).
    - Para criar o select de categorias no form de produtos:
        . Injetar o CategoryRepository em ProductsController
            public function __construct(ProductRepository $repository, CategoryRepository $categoryRepository) {
                $this->repository = $repository;
                $this->categoryRepository = $categoryRepository;
            }
        . Atualizar o método edit():
            public function edit($id) {
                $product = $this->repository->find($id);
                $categories = $this->categoryRepository->lists('name', 'id');
                return view('admin.products.edit', compact('product', 'categories'));
            }
    - Atualizar demais métodos do ProductsController
    - Para excluir produtos:
        . Criar um método destroy() em ProductController
            public function destroy($id) {
                $this->repository->delete($id);
                return redirect()->route('admin.products.index');
            }
        . Criar a rota.
            Route::get('admin/products/destroy/{id}', ['as' => 'admin.products.destroy', 'uses' => 'ProductsController@destroy']);
        . Criar o link para remoção na view:
            <a href="{{ route('admin.products.destroy', ['id' => $product->id]) }}" class="btn btn-default btn-sm">Excluir</a>

ROTAS
    - Agrupar rotas:
        Route::group(['prefix' => 'admin', 'as' => 'admin.'], function() {
            Route::get('categories/edit/{id}', ['as' => 'categories.edit', 'uses' => 'CategoriesController@edit']);
            ...
            ...
        });
    - Middleware:
        . Preparar um usuário:
            . Editar a seed UserTableSeeder.php
                factory(User::class)->create(
                    'name' => 'User',
                    'email' => 'user@user.com',
                    'password' => bcrypt(123456),
                    'remember_token' => str_random(10)
                );
                factory(User::class)->create(
                    'name' => 'User admin',
                    'email' => 'admin@user.com',
                    'password' => bcrypt(123456),
                    'role' => 'admin',
                    'remember_token' => str_random(10)
                );
            . Rodar as seeds novamente: php artisan migrate:refresh --seed
        . Criar o middleware: php artisan make:middleware CheckRole
        . O método handle() será executado quando o middleware for chamado
        . Editar o arquivo http\kernel.php e registrar o middleware:
            'auth.checkrole' => \CodeDelivery\Http\Middleware\CheckRole::class
        . Editar o arquivo route.php e acrescentar à rota: 'middleware' => 'auth.checrole'
        . Criar as validações no método handle() em CheckRole:
            if (!use \Illuminate\Support\Facades\Auth::check() {
                return redirect('/auth/login');
            }
            if (Ause \Illuminate\Support\Facades\Auth::user()->role != 'admin' {
                return redirect('/auth/login');
            }
CLIENT CONTROLLER
    - Duplicar CategoryController e ajustar para ClientController.
    - Duplicar AdminCategoryRequest e ajustar para AdminClientRequest.
    - Criar as rotas para clients
    - Duplicar as views.
        . Ao ajustar a index utilizar $client->user->name para listar o nome
        . Para que o nome seja listado, atualizar o método user() do model Client:
            return $this->hasOne(User::class, 'id', 'user_id');

    - Ajustar a view edit.blade.php substituindo categorias para clientes.
    - Configurar a include _form.blade para exibir os dados do cliente (dados na tabela de users):
        {!! Form::text('user[name]', null, ['class', 'form-control']) !!}
        {!! Form::text('user[email]', null, ['class', 'form-control']) !!}
        {!! Form::text('phone', null, ['class', 'form-control']) !!}
        {!! Form::textarea('address', null, ['class', 'form-control']) !!}
        {!! Form::text('city, null, ['class', 'form-control']) !!}
        {!! Form::text('state', null, ['class', 'form-control']) !!}
        {!! Form::text('zipcode', null, ['class', 'form-control']) !!}

CLIENT SERVICE
    - A camada de Service serve para manipular dados de acordo com regras de negócio específicas.
    - Neste caso, sempre que o nome do cliente (ex.) for editado, isso deverá persistir na tabela de uers.
      Isto se encaixa em uma regra de negócio.
    - Criar o arquivo app/Services/ClientService.php
    - Editar este arquivo e no método __construct(), injetar ClientRepository e UserRepository.

    - Criar um método update(array $data, $id)
        public function update(array $data, $id) {
            $this->clientRepository->update($data, $id);
            $userId = $this->clientRepository->find($id, 'user_id')->user_id;
            $this->userRepository->update($data['user'], $userId);
        }
        . Editar ClientController e injetar o ClientService.
        . Editar o método update() de ClientController:
            public function update(AdminClientRequest $request, $id) {
                $data = $request->all();
                $this->clientService->update($data, $id);
                ....
            }
    - Editar a view create.blade.php e ajustar para Client.
    - Criar uma senha padrão para o cliente cadastrado na área administrativa.
        . Passos para criar um método create no ClientService:
            1 - Criar um passowrd para user;
            2 - Criar o user;
            3 - Recuperar o id do user criado;
            4 - Atribuir o id do user criado para o campo user_id de client;
            5 - Criar o cliente;
            NOTA: Ajustar o método store() de ClientsController para chamar o método create do ClientService.
ORDERS
    - Criar a seed para order.
        . Obs.: não popular deliveryman_id
        . Obs.: para cada order criada, criar também os itens:
            factory(Order::class, 10)->create()->each(function ($o) {
                for ($i = 0; $i <= 2; $i++) {
                    $o->items()->save(factory(OrderItem::class)->make(
                        [
                            'product_id' => rand(1, 5),
                            'qtd' => 2,
                            'price' => 50
                        ]
                    ));
                }
            });
        . Criar uma factory vazia para OrderItem.
    - Rodar as seeds: php artisan migrate:refresh --seed
    - Criar o controller para orders (DI de OrderRepository).
    - Criar o método index e a rota para o mesmo.
    - Criar a view index (obs.: não serão criados pedidos pelo admin).
    - Atualizar a seed de users com uma factory para entregadores.
        . Obs.: definir a coluna role como 'deliveryman'.
        . Obs.: criar uns 
    - Criar a view edit 
        . Obs.: só serão editados o status e o deliveryman.
        . Criar o método update e a rota.
        . Criar uma lista de status. Por enquanto, criar no controller.
        . Criar um método getDeliverymen() para listar os entregadores em UserRepositoryEloquent:
            reutrn $this->model->where(['role' => 'deliveryman'])->lists('name', 'id');
        . Criar a listagem de entregadores.
    - Ajustar a relação do método de deliveryman() do model Order:
        return $this->belongsTo(User::class, 'user_deliveryman_id', 'id');

CHECKOUT
    - Criar uma entidade cupom: php artisan make:repository cupom. Em seguida registrar o repository em RepositoryServiceProvider.
    - Criar a migração create_cupoms_table:
        $table->string('code');
        $table->decimal('value');
        $table->boolean('used')->default(0);
    - Nesta mesma migrate, alterar a tabela de orders:
        Schema:table('orders', function(Blueprint $table) {
            $table->integer('cupom_id')->unsigned()->nullable();
            $table->foreing('cupom_id')->references('id')->on->('cupoms');
        }
    - Ainda nesta migrate, editar o método down() e remover a integridade entre cupoms e orders:
        Schema:table('orders', function(Blueprint $table) {
            $table->dropForeign('orders_cupom_id_foreign');
            $table->dropColumn('cupom_id');
        }
        Schema::drop('cupoms');
    - Rodar a migração.
    - Criar a seed CupomTableSeeder.
    - Criar o controller CupomsController. Criar os métodos e rotas.
    - Criar as views

    - Criar as rotas para o checkout. Criar um grupo para a área do cliente (no momento sem middleware):
        Route::group(['prefix'=>'customer', 'as'=>'customer.'], function() {
            Route::get('order/create', ['as' => 'order.create', 'uses' => 'CheckoutController@create']);
        });
    - Criar o CheckoutController.
        . Injetar Order, User e Product.
        . Em ProductRepositoryEloquent criar uma lista (lists()) de produtos para ser utilizada no create() do checkoutt (id, name).
        . Criar o método create().
        . Criar a view customer.order.create.
        . Criar um form com campo select para produtos e input para quantiade. Também um botão para criar novos campos a cada item.
        . Criar função javascript para inserir itens no form.
        . Criar função para calcular total. 
    - Criar o OrderService
        . Injetar: Cupom, Order e Product.
        . Criar o método create().
            . Iniciar uma transação:
                \DB::beginTransaction();
                try {
            . Definir o status como 0: 
                $data['status'] = 0;
            . Tratar a existência do cupom.
                if (isset($data['cupom_code'])) {
                    $cupom = $this->cupomRepository->findByField('code', $data['cupom_code'])->first();
                    $data['cupom_id'] = $cupom->id;
                    $cupom->used = 1;
                    $cupom->save();
                    unset($data['cupom_code']);
                }
            . Criar o pedido.
                $items = $data['items'];
                unset($data['items']);
                $order = $this->orderRepository->create($data);
                $total = 0;
            . Salvar os itens.
                foreach ($items as $item) {
                    $item['price'] = $this->productRepository->find($item['product_id']->price;
                    $order->items()->create($item);
                    $total += $item['price'] * $item['qtd'];
                }
            . Atualizar o total.
                $order->total = $total;
                if (isset($cupom)) {
                    $order->total = total - $cupom->value;
                }
                $order->save();
            . Encerrar a transação:
                    \DB::commit()
                } catch (\Exception $e) {
                    \DB::rollback();
                    throw $e;
                }
    - Implementar o CheckoutController: criar o método store() utilizar o método create() utilizando o service criado.
        . Lembrar que o client_id deve ser recuperado pelo UserRepository->find() com Auth::user()->id
        . Criar a rota para store().
        . Criar a rota e a view para index de orders
            public function index() {
                $clientId = $this->userRepository->find(Auth::user()->id)->client->id;
                $orders = $this->repository->scopeQuery(function($query) use($clientId) {
                    return $query->where('client_id', '=', $clientId);
                })->paginate();
            }
    - Os usuários User e Admin não possuem clientes relacionados, então a seeder de User deve ser ajustada:
        ...->client()->save(factory(Client::class)->make());
        . Executar um refresh no banco.
    - Restringir o acesso às opções de acordo com usuários e clientes em app.blade:
        . Utilizsar: Auth::user()->role.
    - Ajustar CheckRole.php para receber um parâmetro $role e validar os acessos às rotas com este parâmetro.
    - Adicionar o middleware para as rotas de clientes.

OAUTH2
    - Instalando:
        . Biblioteca: lucadegasperi/oauth2-server-laravel (seguir os passos de instalação no próprio git)
            composer require lucadegasperi/oauth2-server-laravel:5.0.*
        
    - Configurar rota para retornar token
        . Seguir as instruções em "with de password grant"
        . Configurar o middleware $except no arquivo VerifyCsrfToken.php, adicionando as rotas que não deverão receber a
        verificação do csrf:
            'oauth/access_token'
    - Criar cliente teste na tabela oauth_clients
    - Testar a autenticação passando os parâmetros: grant_type, username, password, client_id, client_secret
    - Configurar refresh-token e testar:
        grant_type = refresh_token
        client_id = ...
        client_secret = ...
        refresh_token = <refresh-token>
    - Criar o agrupamento de rotas da api:
        Route::group(['prefix' => 'api', 'middleware' => 'oauth', 'as' => 'api'], function() {
            Rout:get('teste', function() {
                'id' => 1,
                'name' => 'henry'
            });
        });
    - Escapar a rota da api em VerifyCsrfToken.php
        'api/*'
    - Testar a rota passando o token no reader (Authorization = Bearer <token>).
    - Configurar o refresh_token conforme documentação.
        . Testar o refresh_token passando: grant_type = refresh_token, refresh_token = <...>, client_id, client_secret
    - Agrupandoi rotas da api:
        Route::group(['prefix' => 'api', 'middleware' => 'oauth',  'as' => 'api.'], function(){
            Route::get('pedidos', function() {
                return [
                    'id' => 1,
                    'name' => 'henry'
                ];
            });   
        });
API CLIENTE
    - Deverá existir uma separação para client e deliveryman:
        Rout:group(['prefis' => 'client', 'as' => 'client.'], function() {
            Route::get('pedidos', function() {
                return [
                    'id' => 1,
                    'name' => 'henry - Cliente'
                ];
            }); 
        });
        Rout:group(['prefis' => 'deliveryman', 'as' => 'deliveryman.'], function() {
            Route::get('pedidos', function() {
                return [
                    'id' => 1,
                    'name' => 'henry - Entregador'
                ];
            }); 
        });

OAUTHCHECKROLE
    - Clonar checkrole.php
        . Limpar referências ao Auth.
        . Fazer o DI de UserRepository.
        . Ter acesso ao usuário autenticado no OAuth: 
            $id = Authorizer:getResourseOwnerId()       // facade Authorizer
            $user = $this->userRepository->find($id);
            if ($user->role != $role) {
                abort(403, 'Access forbiden!');
            }
            return $next($request);
        . Registrar este novo middleware em kernel.php.
        . Incluir o middleware registrado nas respectivas rotas de client e deliveryman.

CONTROLLER CLIENTCHECKOUT - RESTFUL
    - Criar o diretório Controllers/Api/Client.
    - Copiar o ClientController existente.
    - Criar os métodos REST
    - Deve ser importado o Controller a ser extendido devido ao caminho api/client.
    - Ajustar namespace: namespace CodeDelivery\Http\Controllers\Api\Client;
    - Executar: composer dump_autoload
    - Ajustar as rotas utilisando Rout::resource()
        Route::resource('order', 'Api\Client\ClientCheckoutController',
            ['except' => ['create', 'edit', 'destroy']]);
    - index()
        . Obter o código do usuário através de Authorizer::getResourceOwnerId().
        . Substituir em find().

    - store()
        . Obter o código do usuário através de Authorizer::getResourceOwnerId().
        . Substituir em find().
        . Retornar a order no método create de OrderService.

    - show()
        $order->items->each(function($item) {
            $item->product->category;
        });

CONTROLLER DELIVERYMANCHECKOUTCONTROLLER
    - Clonar ClientCheckoutController.php
    - Ajustar métodos index() e show(). Eliminar o store().
    - Criar a rota.


    - Criar no repository um método getByIdAndDeliveryman() para checar se order pertece ao deliverymanb:
        function getByIdAndDeliveryman($id, $idDeliveryman) {
            $result = $this->with(['client', 'items', 'cupom'])->findWhere([
                'id' => $id,
                'user_deliveryman_id' => $idDeliveryman
            ]);

            $result = $result->first();
            if ($result) {
                $result->items->each(function($item){
                    $item->product;
                });
            }
            return $result;
        }
    - Ajustar permissão no método show() do controller:
        $idDeliveryman = Authorizer::getResourceOwnerId();
        return $this->repository->getByIdAndDeliveryman($id, $idDeliveryman);
    - Na interface OrderRepository, declarar o método getByIdAndDeliveryman.

    - Criando o endpoint para atualizar o status.
        . Criar uma rota Route:
            Route:patch('order/{id}/update-status', [
                'uses' => 'Api\Deliveryman\DeliverymanCheckoutController@updateStatus',
                'as' => 'orders.update_status']
            )
    - Criar o método updateStatus() no OrderService.php:
        public funciton updateStatus($id, $idDeliveryman) {
            $order = $this->orderRepository->getByIdAndDeliveryman($id, $idDeliveryman);
            if ($order instanceof Order) {
                $order->status = $status;
                $order->save();
                return $order;
            }
            return false;
        }
    - Criar o método updateStatus() no DeliverymanCheckoutController.php:
        public function updateStatus($id) {
            $idDeliveryman = Authorizer::getResourceOwnerId();
            $order = $this->service->updateStatus($id, $idDeliveryman, $request->get('status'); 
            if ($order) {
                return $order;
            }
            abort(400, 'Order não encontrado.');
        }
VALIDAÇÕES E SERIALIZAÇÕES
    - Criar a request Request\CheckoutRequest.php.
    - Criar um método buildRulesItems():
        public function buildRulesItems($key, array &$rules) {
            $rules["items.$key.product_id"] => 'required',
            $rules["items.$key.qtd"] => 'required',
        }
    - Editar o método rules() e criar as regras de validação:
        public function rules(HttpRequest $request) { 
            return [
                'cupom_code' => 'exists:cupoms,code,used,0'     // validar se o cupom existe em cupoms pela coluna code e a coluna used seja zero
            ]
            $this->buildRulesItems(0, $rules)           // para garantir que deverá ser informado ao menos um item
            $items = $request->get('items', []);        // retorna os itens do request ou um array vazio
            $items = is_array($items)?$items:[];
            foreach ($items as $k => $v) {
                $this->buildRulesItems($k, $rules);
            }
            $return $rules;
        }
    - Em ClientCheckoutController, fazer a DI da request criada nos métodos necessários.
    - Criar um método no request para validar os itens conforme a quantidade de itens informados:
    - Testar o request CheckoutRequest no controller CheckoutController:
        public function store(CheckoutRequest $request)

FRACTAL THEPHPLEAGUE
    - Instalando: composer require league/fractal
    - Criando transformer no model Order (implements Transformable):
        . A trait TransformableTrait possui um método transform() que podemos sobrepor.
        . Editar o model Order:
            public function trnasform() {
                return [
                    'order' => $this->id,
                ]
            }
        . Criar um método presenter() em OrderRepositoryEloquent que definirá 
          que o presenter padrão será utilizado:
            public function presenter() {
                return \Prettus\Repository\Presenter\ModelFractalPresenter::class;
            }

CRIANDO PRESENTERS E TRANSFORMES
    - Para cirar o OrderTransformer: php artisan make:transform Order
    - Para criar o OrderPresenter: php artisan make:presenter Order
    - Criar o método presenter() em OrderRepositoryEloquent:
        public function presenter() {
            return \CodeDelivery\Presenters\OrderPresenter::class;
        }

SERIALIZANDO COM RELACIONAMENT0S
    - Criar o método includeCupom() em OrderTransformer:
        public function includeCupom(Order $model) {
            if (!$model->cupom) {
                return NULL;
            }
            return $this->item($model->cupom, new CupomTransformer);        // item() renderiza um objeto
        }
    - Criar o transformer para Cupom: php artisan make:transform Cupom
    - Definir $defaultIncludes (renderiza todos os relacionamentos):
        protected $defaultIncludes = ['cupom'];
    - Criar o método includeItems() em OrderTransform:
        public function includeItems(Order $model) {
            return $this->colection($model->items, new OrderItemsTransformer);      // colection() renderiza uma coleção
        }
    - Criar o transformer para OrderItem: php artisan make:transform OrderItem
    - Definir $availiableIncludes (renderiza relacionamentos sub demanda - via url)
        protected $availableIncludes = ['cupom', 'items'];
        . Para utilizar um dos relacionamentos basta incluir o parâmetro include na URL e 
        atribuir o nome dos relacionamentos separados por vírgula
    - Escapando presenter por padrão
        . Como as informações estão sendo consumidas na sua maioria por objeto e não por array,
        podemos definir que os presenters não serão utilizados como padrão. Isto pode ser 
        definido no repository (OrderRepositoryEloquent):
            protected $skipPresenter = true;
***
    - CLIENTCHECKOUTCONTROLLER